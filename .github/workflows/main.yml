name: CI
on: [push]
jobs:
  build-libcxx32:
    runs-on: macos-latest
    steps:
    - name: Check Cache libcxx32
      id: libcxx32-llvm
      uses: Mystraht/cache@master
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx32
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Build libcxx, libcxxabi
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
        git clone https://github.com/llvm/llvm-project.git llvm -b release/10.x
        mkdir -p libcxx32-build
        cd libcxx32-build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" -DCMAKE_BUILD_TYPE=Release -DLIBCXX_BUILD_32_BITS=ON -DLIBCXXABI_BUILD_32_BITS=ON -DLLVM_BUILD_32_BITS=ON
        make -j4 cxx cxxabi
  build-libcxx64:
    runs-on: macos-latest
    steps:
    - name: Check Cache libcxx64
      id: libcxx64-llvm
      uses: Mystraht/cache@master
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Build libcxx, libcxxabi
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
        git clone https://github.com/llvm/llvm-project.git llvm -b release/10.x
        mkdir -p libcxx64-build
        cd libcxx64-build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" -DCMAKE_BUILD_TYPE=Release
        make -j4 cxx cxxabi
  build-libcxx:
    runs-on: macos-latest
    needs: [build-libcxx32,build-libcxx64]
    steps:
    - name: Check libcxx
      id: libcxx-llvm
      uses: Mystraht/cache@master
      env:
        cache-name: cache-libcxx--macos-10-10-4
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx32
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      id: libcxx32-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      id: libcxx64-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx--macos-10-10-4
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Build universal lib
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      run: |
        mkdir -p libcxx-build/
        lipo -create libcxx32-build/lib/libc++.dylib libcxx64-build/lib/libc++.dylib -output libcxx-build/libc++.1.dylib
        lipo -create libcxx32-build/lib/libc++abi.dylib libcxx64-build/lib/libc++abi.dylib -output libcxx-build/libc++abi.1.dylib
        cd libcxx-build
        ln -s libc++.1.dylib libc++.dylib
        ln -s libc++abi.1.dylib libc++abi.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libc++.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libc++abi.dylib
  brew-libzip:
    runs-on: macos-latest
    steps:
    - name: Check for libzip
      id: cache-brew-libzip
      uses: Mystraht/cache@master
      env:
        cache-name: cache-brew-libzip-macos-10-10-2
      with:
        path: /usr/local/Cellar/libzip
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libzip
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libzip-macos-10-10-2
      with:
        path: /usr/local/Cellar/libzip
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Apply custom patch and Update brew
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git checkout fork/master
    - name: Install brew dependencies
      if: steps.cache-brew-libzip.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.10.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
        HOMEBREW_NO_AUTO_UPDATE=1 brew reinstall libzip
  brew-protobuf:
    runs-on: macos-latest
    steps:
    - name: Check for protobuf
      id: cache-brew-protobuf
      uses: Mystraht/cache@master
      env:
        cache-name: cache-brew-protobuf-macos-10-10
      with:
        path: /usr/local/Cellar/protobuf
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache protobuf
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-protobuf-macos-10-10
      with:
        path: /usr/local/Cellar/protobuf
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Apply custom patch and Update brew
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git merge fork/master
    - name: Install brew dependencies
      if: steps.cache-brew-protobuf.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export HOMEBREW_NO_AUTO_UPDATE=1
        brew install automake
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.10.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        brew remove --ignore-dependencies python@3 || :
        brew remove --ignore-dependencies protobuf || :
        brew install --build-from-source protobuf
  brew-libuv:
    runs-on: macos-latest
    steps:
    - name: Check for libuv
      id: cache-brew-libuv
      uses: Mystraht/cache@master
      env:
        cache-name: cache-brew-libuv-macos-10-10
      with:
        path: /usr/local/Cellar/libuv
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libuv
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libuv-macos-10-10
      with:
        path: /usr/local/Cellar/libuv
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Install libuv breq dependencies
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        brew install automake sphinx-doc
        brew remove --ignore-dependencies libuv || :
    - name: Apply custom patch and Update brew
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      working-directory: "/usr/local/Homebrew"
      run: |
        git remote add fork https://github.com/ChristopherHX/brew.git
        git fetch fork
        git config --global user.email "CI@local"
        git config --global user.name "CI Bot"
        git merge fork/master
    - name: Install brew dependencies
      if: steps.cache-brew-libuv.outputs.cache-hit != 'true'
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export HOMEBREW_MACOSX_DEPLOYMENT_TARGET=10.10.0
        export HOMEBREW_SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        HOMEBREW_NO_AUTO_UPDATE=1 brew install --build-from-source libuv
  buildopenssl32:
    runs-on: macos-latest
    steps:
    - name: Check for openssl
      id: cache-openssl32
      uses: Mystraht/cache@master
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: /usr/local/ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.cache-openssl32.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: /usr/local/ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-openssl32.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Build OpenSSL
      if: steps.cache-openssl32.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
        cd openssl
        KERNEL_BITS=32 ./config --prefix=/usr/local/ssl32
        make
        sudo make install_sw
  buildopenssl64:
    runs-on: macos-latest
    steps:
    - name: Check for openssl
      id: cache-openssl64
      uses: Mystraht/cache@master
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: /usr/local/ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.cache-openssl64.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: /usr/local/ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.cache-openssl64.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: Build OpenSSL
      if: steps.cache-openssl64.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
        cd openssl
        KERNEL_BITS=64 ./config --prefix=/usr/local/ssl64
        sudo make install_sw
  buildopenssl:
    runs-on: macos-latest
    needs: [buildopenssl32, buildopenssl64]
    steps:
    - name: Check openssl
      id: openssl
      uses: Mystraht/cache@master
      env:
        cache-name: cache-openssl-2
      with:
        path: ssl
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.openssl.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl-2
      with:
        path: ssl
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl32
      if: steps.openssl.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl64
      if: steps.openssl.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Build universal lib
      if: steps.openssl.outputs.cache-hit != 'true'
      run: |
        mkdir -p ssl/lib
        lipo -create ssl32/lib/libssl.dylib ssl64/lib/libssl.dylib -output ssl/lib/libssl.dylib
        lipo -create ssl32/lib/libcrypto.dylib ssl64/lib/libcrypto.dylib -output ssl/lib/libcrypto.dylib
        cd ssl/lib
        install_name_tool -id @rpath/libssl.dylib -add_rpath @loader_path/../Frameworks libssl.dylib
        install_name_tool -id @rpath/libcrypto.dylib -add_rpath @loader_path/../Frameworks libcrypto.dylib
  buildangle:
    runs-on: macos-latest
    # needs: [buildangle32, buildangle64]
    steps:
    - name: Check angle
      id: angle
      uses: Mystraht/cache@master
      env:
        cache-name: cache-angle-3
      with:
        path: osx-angle-ci/artifacts
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache angle
      if: steps.angle.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-angle-3
      with:
        path: osx-angle-ci/artifacts
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.angle.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
    - name: brew install / link
      if: steps.angle.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=${{ matrix.target }}
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH=$PATH:$PWD/depot_tools
        git clone https://github.com/minecraft-linux/angle.git
        pushd angle
        python scripts/bootstrap.py
        gclient sync
        gn gen out/Release64 --args='is_debug=false mac_sdk_path="'"${SDKROOT}"'" mac_sdk_min="10.10.0" mac_min_system_version="10.10.0" mac_deployment_target="10.10.0" angle_enable_swiftshader=false angle_enable_vulkan=false'
        autoninja -C out/Release64 libEGL libGLESv2
        find build -name '*.gn' | xargs -n 1 sed -i '' 's/-fatal_warnings//g'
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        gn gen out/Release --args='target_cpu="x86" is_debug=false mac_sdk_path="'"${SDKROOT}"'" mac_sdk_min="10.10.0" mac_min_system_version="10.10.0" mac_deployment_target="10.10.0" angle_enable_metal=false angle_enable_swiftshader=false angle_enable_vulkan=false'
        autoninja -C out/Release libEGL libGLESv2
        popd
    - name: upload
      if: steps.angle.outputs.cache-hit != 'true'
      run: |
        mkdir -p osx-angle-ci/artifacts
        lipo -create angle/out/Release/libEGL.dylib angle/out/Release64/libEGL.dylib -output ./osx-angle-ci/artifacts/libEGL.dylib
        lipo -create angle/out/Release/libGLESv2.dylib angle/out/Release64/libGLESv2.dylib -output ./osx-angle-ci/artifacts/libGLESv2.dylib
  build:
    runs-on: macos-latest
    needs: [brew-libzip, brew-protobuf, brew-libuv, build-libcxx, buildopenssl, buildangle]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: "10.10.0"
            micro: 0
            QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_592/
            QT_VERSION_SHORT: 5.9.2
            QT_VERSION: 5.9.2-0-201710050729
            QT_PACKAGE_PREFIX: qt.592.
            QT_PACKAGE_SUFFIX: clang_64
            QT_PREBUILT_SUFFIX: -MacOS-OSX_10_10-Clang-MacOS-OSX_10_10-X86_64
            extraflags: "--qtworkaround"
          - target: "10.12.0"
            micro: 1
            QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_5113/
            QT_VERSION_SHORT: 5.11.3
            QT_VERSION: 5.11.3-0-201811291904
            QT_PACKAGE_PREFIX: qt.qt5.5113.
            QT_PACKAGE_SUFFIX: clang_64
            QT_PREBUILT_SUFFIX: -MacOS-MacOS_10_12-Clang-MacOS-MacOS_10_12-X86_64
          - target: "10.13.0"
            micro: 2
            QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_5152/
            QT_VERSION_SHORT: 5.15.2
            QT_VERSION: 5.15.2-0-202011130601
            QT_PACKAGE_PREFIX: qt.qt5.5152.
            QT_PACKAGE_SUFFIX: clang_64
            QT_PREBUILT_SUFFIX: -MacOS-MacOS_10_13-Clang-MacOS-MacOS_10_13-X86_64
    steps:
    - name: Set Environment Variables
      run: |
        IFS='/' read -ra REPO <<< "${GITHUB_REPOSITORY}"
        echo "::set-env REPO_USER=${REPO[0]}"
        echo "::set-env REPO_NAME=${REPO[1]}"
        IFS='/' read -ra REF <<< "${GITHUB_REF}"
        echo "::set-env BRANCH_NAME=${REF[2]}"
    - uses: actions/checkout@v1
    - uses: actions/checkout@v1
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: eea27130a21aea7605cd019e5a45369535bec800
        token: ${{ secrets.MacOSX1014sdk }}
    - name: brew install / link
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew remove --ignore-dependencies libuv || :
        HOMEBREW_NO_AUTO_UPDATE=1 brew remove --ignore-dependencies protobuf || :
        HOMEBREW_NO_AUTO_UPDATE=1 brew remove --ignore-dependencies libzip || :
    - name: Cache libcxx32
      id: libcxx32-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      id: libcxx64-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx
      id: libcxx-llvm
      uses: actions/cache@v1
      env:
        cache-name: cache-libcxx--macos-10-10-4
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Install python dependencies
      run: pip3 install jinja2 ds_store
    - name: Restore libzip
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libzip-macos-10-10-2
      with:
        path: /usr/local/Cellar/libzip
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Restore protobuf
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-protobuf-macos-10-10
      with:
        path: /usr/local/Cellar/protobuf
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Restore libuv
      uses: actions/cache@v1
      env:
        cache-name: cache-brew-libuv-macos-10-10
      with:
        path: /usr/local/Cellar/libuv
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl-2
      with:
        path: ssl
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl32
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl64
      uses: actions/cache@v1
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: patch ssl
      run: |
        cd ssl32
        rm -rf lib
        ln -s ../ssl/lib
        cd ../ssl64
        rm -rf lib
        ln -s ../ssl/lib
    - name: Cache angle
      if: steps.angle.outputs.cache-hit != 'true'
      uses: actions/cache@v1
      env:
        cache-name: cache-angle-3
      with:
        path: source/osx-angle-ci/artifacts
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: brew install / link
      run: |
        HOMEBREW_NO_AUTO_UPDATE=1 brew install p7zip automake
        HOMEBREW_NO_AUTO_UPDATE=1 brew link libuv protobuf libzip
    - name: Cache qt
      id: cache-qt
      uses: actions/cache@v1
      env:
        cache-name: cache-qt-macos-${{ matrix.target }}
      with:
        path: qt
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Download Qt
      if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        export QT_BASE_URL=${{ matrix.QT_BASE_URL }}
        export QT_VERSION_SHORT=${{ matrix.QT_VERSION_SHORT }}
        export QT_VERSION=${{ matrix.QT_VERSION }}
        export QT_PACKAGE_PREFIX=${{ matrix.QT_PACKAGE_PREFIX }}
        export QT_PACKAGE_SUFFIX=${{ matrix.QT_PACKAGE_SUFFIX }}
        export QT_PREBUILT_SUFFIX=${{ matrix.QT_PREBUILT_SUFFIX }}
        ./download_qt.sh
    - name: Build
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: |
        export MACOSX_DEPLOYMENT_TARGET=${{ matrix.target }}
        export SDKROOT=${{ github.workspace }}/../MacOSX10.14.sdk
        python3 __main__.py --qt-path qt/*/* --update-sparkle-appcast https://github.com/${GITHUB_REPOSITORY}/releases/download/ng.dmg/appcast.xml --update-sparkle-ed-public-key ${{ secrets.SPARKLE_ECDSA_PUB }} --buildangle --build-id ${GITHUB_RUN_NUMBER} --prettyversion "$(cat version.txt)-macOS-x86_64-0.${{ matrix.micro }}.${GITHUB_RUN_NUMBER}" --version "0.${{ matrix.micro }}.${GITHUB_RUN_NUMBER}" ${{ matrix.extraflags }}
    - name: Build .dmg
      working-directory: ${{ github.workspace }}/../osx-packaging-scripts
      run: python3 build_dmg.py
    - name: Generate Dist
      run: |
        DMG_FILENAME="Minecraft_Bedrock_Launcher_$(cat version.txt)-macOS-x86_64-0.${{ matrix.micro }}.${GITHUB_RUN_NUMBER}_macOS_${{ matrix.target }}.dmg"
        mkdir -p dist
        mv "${{ github.workspace }}/../osx-packaging-scripts/output/Minecraft Bedrock Launcher.dmg" "dist/${DMG_FILENAME}"
    - name: Upload Latest
      run: |
        curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_darwin_amd64.zip --output ghr.zip
        unzip ghr.zip
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ChristopherHX -r osx-packaging-scripts -replace -b "$(cat changelog.txt)" "$(cat version.txt)" dist/
